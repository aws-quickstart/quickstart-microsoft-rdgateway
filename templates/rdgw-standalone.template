AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  This template is intended to be installed into an existing VPC with two public subnets.
  It will create an auto-scaling group of RD Gateway instances in the public VPC subnets.
  **WARNING** This template creates Amazon EC2 Windows instance and related resources.
  You will be billed for the AWS resources used if you create a stack from this template. (qs-1qup6rag3)
Metadata:
  QuickStartDocumentation:
    EntrypointName: "Parameters for launching into an existing VPC (standalone)"
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Network configuration
        Parameters:
          - VPCID
          - PublicSubnet1ID
          - PublicSubnet2ID
          - RDGWCIDR
      - Label:
          default: Amazon EC2 configuration
        Parameters:
          - KeyPairName
          - RDGWInstanceType
          - LatestAmiId
      - Label:
          default: Microsoft Remote Desktop Gateway configuration
        Parameters:
          - NumberOfRDGWHosts
          - AdminUser
          - AdminPassword
          - DomainDNSName
          - SetupAppInsightsMonitoring
          - AppInsightsApplicationName
      - Label:
          default: AWS Quick Start configuration
        Parameters:
          - QSS3BucketName
          - QSS3KeyPrefix
          - QSS3BucketRegion
    ParameterLabels:
      AdminPassword:
        default: Admin password
      AdminUser:
        default: Admin user name
      AppInsightsApplicationName:
        default: Registered Application Name
      DomainDNSName:
        default: Domain DNS name
      KeyPairName:
        default: Key pair name
      LatestAmiId:
        default: SSM parameter to grab latest AMI ID
      NumberOfRDGWHosts:
        default: Number of RDGW hosts
      PublicSubnet1ID:
        default: Public subnet 1 ID
      PublicSubnet2ID:
        default: Public subnet 2 ID
      QSS3BucketName:
        default: Quick Start S3 bucket name
      QSS3KeyPrefix:
        default: Quick Start S3 key prefix
      QSS3BucketRegion:
        default: Quick Start S3 bucket Region
      RDGWInstanceType:
        default: Remote Desktop Gateway instance type
      RDGWCIDR:
        default: Allowed Remote Desktop Gateway external access CIDR
      SetupAppInsightsMonitoring:
        default: Setup Application Insights Monitoring
      VPCID:
        default: VPC ID
Parameters:
  AdminPassword:
    Description: Password for the administrative account. Must be at least 8 characters
      containing letters, numbers, and symbols.
    Type: String
    MinLength: '8'
    MaxLength: '32'
    AllowedPattern: '(?=^.{8,32}$)((?=.*\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*'
    NoEcho: 'true'
  AdminUser:
    Description: User name for the new local administrator account.
    Type: String
    Default: StackAdmin
    MinLength: '5'
    MaxLength: '25'
    AllowedPattern: '^[a-zA-Z0-9]+$'
  AppInsightsApplicationName:
    Description: Application name to be used with AppInsights monitoring.
    Type: String
    Default: ''
    MaxLength: '300'
    AllowedPattern: '^[a-zA-Z0-9\-]*$'
  DomainDNSName:
    Description: Fully qualified domain name (FQDN), such as example.com.
    Type: String
    Default: example.com
    MinLength: '2'
    MaxLength: '255'
    AllowedPattern: '^[a-zA-Z0-9]+[a-zA-Z0-9\-\.]*[a-zA-Z0-9]+$'
  KeyPairName:
    Description: Public/private key pairs allow you to securely connect to your instance
      after it launches.
    Type: AWS::EC2::KeyPair::KeyName
  LatestAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-windows-latest/Windows_Server-2016-English-Full-Base
  NumberOfRDGWHosts:
    AllowedValues:
      - '1'
      - '2'
      - '3'
      - '4'
    Default: '1'
    Description: Enter the number of Remote Desktop Gateway hosts to create.
    Type: String
  PublicSubnet1ID:
    Description: ID of the public subnet 1 that you want to provision the first Remote
      Desktop Gateway into (for example, subnet-a0246dcd).
    Type: AWS::EC2::Subnet::Id
  PublicSubnet2ID:
    Description: ID of the public subnet 2 you want to provision the second Remote
      Desktop Gateway into (for example, subnet-e3246d8e).
    Type: AWS::EC2::Subnet::Id
  QSS3BucketName:
    AllowedPattern: '^[a-z0-9]+[a-z0-9\.\-]*[a-z0-9]+$'
    ConstraintDescription: The Quick Start bucket name can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a 
      hyphen (-).
    Default: aws-quickstart
    Description: Name of the S3 bucket for your copy of the Quick Start assets. 
      Keep the default name unless you are customizing the template. 
      Changing the name updates code references to point to a new Quick 
      Start location. This name can include numbers, lowercase letters, 
      uppercase letters, and hyphens, but do not start or end with a hyphen (-). 
      See https://aws-quickstart.github.io/option1.html.
    MinLength: '3'
    MaxLength: '63'
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: '^[a-zA-Z0-9\-\/]+$'
    ConstraintDescription: The Quick Start S3 key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), and forward slash (/).
    Default: quickstart-microsoft-rdgateway/
    Description: S3 key prefix that is used to simulate a directory for your copy of the 
      Quick Start assets. Keep the default prefix unless you are customizing 
      the template. Changing this prefix updates code references to point to 
      a new Quick Start location. This prefix can include numbers, lowercase 
      letters, uppercase letters, hyphens (-), and forward slashes (/). 
      See https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html 
      and https://aws-quickstart.github.io/option1.html.
    Type: String
  QSS3BucketRegion:
    AllowedPattern: '^[a-z]+\-[a-z\-]+\-[0-9]{1}$'
    Default: 'us-east-1'
    Description: 'AWS Region where the Quick Start S3 bucket (QSS3BucketName) is 
    hosted. Keep the default Region unless you are customizing the template. 
    Changing this Region updates code references to point to a new Quick Start location. 
    When using your own bucket, specify the Region. 
    See https://aws-quickstart.github.io/option1.html.'
    Type: String
  RDGWInstanceType:
    Description: Amazon EC2 instance type for the Remote Desktop Gateway instances.
    Type: String
    Default: t3.2xlarge
    AllowedValues:
      - t2.large
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3.2xlarge
      - t3a.micro
      - t3a.small
      - t3a.medium
      - t3a.large
      - t3a.xlarge
      - t3a.2xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5a.large
      - m5a.xlarge
      - m5a.2xlarge
  RDGWCIDR:
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
    Description: Allowed CIDR Block for external access to the Remote Desktop Gateways.
    Type: String
  SetupAppInsightsMonitoring:
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'false'
    Description: Setup Application Insights monitoring for RDGW resources. 
    Type: String
  VPCID:
    Description: ID of the VPC (for example, vpc-0343606e).
    Type: AWS::EC2::VPC::Id
Rules:
  SubnetsInVPC:
    Assertions:
      - Assert: !EachMemberIn
          - !ValueOfAll
            - AWS::EC2::Subnet::Id
            - VpcId
          - !RefAll 'AWS::EC2::VPC::Id'
        AssertDescription: All subnets must be in the VPC.
  CheckSupportedInstances:
    RuleCondition: !Contains
      - - m4.large
        - m4.xlarge
        - m4.2xlarge
        - m4.4xlarge
      - !Ref 'RDGWInstanceType'
    Assertions:
      - Assert: !Not
          - !Contains
            - - eu-west-3
            - !Ref 'AWS::Region'
        AssertDescription: M4 instances are not available in the Paris region.
Conditions:
  UsingDefaultAppName: !Equals [!Ref AppInsightsApplicationName, '']
  UsingDefaultBucket: !Equals [!Ref QSS3BucketName, 'aws-quickstart']
  appInsightsMonitoring: !Equals [!Ref SetupAppInsightsMonitoring, 'true']
Resources:
  RDGWLocalUserSecrets:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub 'RDGWLocalUserSecrets-${AWS::StackName}'
      Description: Secrets to join AD domain
      SecretString: !Sub '{"username":"${AdminUser}","password":"${AdminPassword}"}'
  SetupConfigurationDoc:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Automation
      Content: 
        schemaVersion: "0.3"
        description: "Configure instances on launch."
        assumeRole: "{{AutomationAssumeRole}}"
        parameters:
          InstanceId:
            allowedPattern: '^i-[a-f0-9]{8}(?:[a-f0-9]{9})?$'
            description: "ID of the instance."
            type: "String" 
          ASGName:
            allowedPattern: '^[a-zA-Z0-9\_\W\s]+$'
            description: "Auto Scaling group name."
            type: "String"
            maxChars: '255'
            minChars: '2'
          LCHName:
            allowedPattern: '^[A-Za-z0-9\-\_\/]+$'
            description: "Life cycle hook name."
            type: "String"
            maxChars: '255'
            minChars: '2'
          DomainDNSName: 
            allowedPattern: '^[a-zA-Z0-9]+[a-zA-Z0-9\-\.]*[a-zA-Z0-9]+$'
            default: "example.com"
            description: "Fully qualified domain name (FQDN) of the forest root domain (for example, example.com)."
            type: "String"
            maxChars: '255'
            minChars: '2'
          AdminSecParam:
            allowedPattern: '^arn:[^:]+:secretsmanager:[^:]+:\d{12}:secret:[\w\/+=.@-]{1,512}$'
            description: "AWS Secrets parameter name that has password and user name for the domain administrator."
            type: "String"
            maxChars: '2048'
            minChars: '20'
          QSS3BucketName:
            allowedPattern: '^[a-z0-9]+[a-z0-9\.\-]*[a-z0-9]+$'
            default: "aws-quickstart"
            description: "Name of the S3 bucket for your copy of the Quick Start assets. 
      Keep the default name unless you are customizing the template. 
      Changing the name updates code references to point to a new Quick 
      Start location. This name can include numbers, lowercase letters, 
      uppercase letters, and hyphens, but do not start or end with a hyphen (-). 
      See https://aws-quickstart.github.io/option1.html."
            minChars: '3'
            maxChars: '63'
            type: "String"
          QSS3KeyPrefix:
            allowedPattern: '^[a-zA-Z0-9\-\/]+$'
            default: "quickstart-microsoft-rdgateway/"
            description: "S3 key prefix that is used to simulate a directory for your copy of the 
      Quick Start assets. Keep the default prefix unless you are customizing 
      the template. Changing this prefix updates code references to point to 
      a new Quick Start location. This prefix can include numbers, lowercase 
      letters, uppercase letters, hyphens (-), and forward slashes (/). 
      See https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html 
      and https://aws-quickstart.github.io/option1.html."
            type: "String"
          URLSuffix:
            allowedPattern: '^[a-zA-Z0-9\-\.]+$'
            default: 'amazonaws.com'
            description: 'AWS URL suffix'
            type: 'String'
          AutomationAssumeRole:
            allowedPattern: '^(arn:[^:]+:iam::\d{12}:role\/[\w\/\+\=\.\@\-]{1,512})?$'
            default: ""
            description: "(Optional) The ARN of the role that allows automation to perform actions on your behalf."
            type: "String" 
        mainSteps:
          - name: waitUntilInstanceStateRunning
            action: aws:waitForAwsResourceProperty
            timeoutSeconds: 600
            inputs:
              Service: ec2
              Api: DescribeInstanceStatus
              InstanceIds:
                - "{{InstanceId}}"
              PropertySelector: "$.InstanceStatuses[0].InstanceState.Name"
              DesiredValues:
                - running
          - name: assertInstanceStateRunning
            action: aws:assertAwsResourceProperty
            inputs:
              Service: ec2
              Api: DescribeInstanceStatus
              InstanceIds:
                - "{{InstanceId}}"
              PropertySelector: "$.InstanceStatuses[0].InstanceState.Name"
              DesiredValues:
                - running
          - name: "installRDP"
            action: aws:runCommand
            onFailure: "step:abandonHookAction"
            inputs:
              DocumentName: AWS-RunPowerShellScript
              InstanceIds: 
                - "{{InstanceId}}"
              CloudWatchOutputConfig:
                CloudWatchOutputEnabled: "true"
                CloudWatchLogGroupName: "/QuickStart/rdgateway/SetupConfiguration"
              Parameters:
                commands: 
                  - |
                     Write-Output 'Installing RD Gateway components'
                     Try {
                       Install-WindowsFeature RDS-Gateway,RSAT-RDS-Gateway
                     } Catch [System.Exception] {
                       Write-Output "Failed to install RD Gateway components $_"
                       Exit 1
                     }
          - name: "createLocalUser"
            action: "aws:runCommand"
            onFailure: "step:abandonHookAction"
            inputs:
              DocumentName: "AWS-RunRemoteScript"
              InstanceIds:
              - "{{InstanceId}}"
              CloudWatchOutputConfig:
                CloudWatchOutputEnabled: "true"
                CloudWatchLogGroupName: !Sub '/aws/Quick_Start/${AWS::StackName}'
              Parameters:
                sourceType: "S3"
                sourceInfo: 
                  !Sub 
                    - '{"path": "https://${S3Bucket}.s3.${S3Region}.{{URLSuffix}}/{{QSS3KeyPrefix}}scripts/Create-LocalUser.ps1"}'
                    - S3Bucket: !If
                        - UsingDefaultBucket
                        - !Sub '${QSS3BucketName}-${AWS::Region}'
                        - !Ref QSS3BucketName
                      S3Region: !If 
                        - UsingDefaultBucket
                        - !Ref AWS::Region
                        - !Ref QSS3BucketRegion
                commandLine: "./Create-LocalUser.ps1 -AdminSecParam {{AdminSecParam}}"
          - name: "configurerdgw"
            action: "aws:runCommand"
            onFailure: "step:abandonHookAction"
            inputs:
              DocumentName: "AWS-RunRemoteScript"
              InstanceIds:
              - "{{InstanceId}}"
              CloudWatchOutputConfig:
                CloudWatchOutputEnabled: "true"
                CloudWatchLogGroupName: !Sub '/aws/Quick_Start/${AWS::StackName}'
              Parameters:
                sourceType: "S3"
                sourceInfo: 
                  !Sub 
                    - '{"path": "https://${S3Bucket}.s3.${S3Region}.{{URLSuffix}}/{{QSS3KeyPrefix}}scripts/Initialize-RDGW.ps1"}'
                    - S3Bucket: !If
                        - UsingDefaultBucket
                        - !Sub '${QSS3BucketName}-${AWS::Region}'
                        - !Ref QSS3BucketName
                      S3Region: !If 
                        - UsingDefaultBucket
                        - !Ref AWS::Region
                        - !Ref QSS3BucketRegion
                commandLine: "./Initialize-RDGW.ps1 -DomainDNSName {{DomainDNSName}} -DomainNetBiosName BUILTIN -GroupName administrators,RDGWUsers"
          - name: "completeHookAction"
            action: aws:executeAwsApi
            isEnd: true
            inputs:
              Service: autoscaling
              Api: CompleteLifecycleAction
              AutoScalingGroupName: "{{ASGName}}"
              InstanceId: "{{InstanceId}}"
              LifecycleActionResult: CONTINUE
              LifecycleHookName: "{{LCHName}}"
          - name: "abandonHookAction"
            action: aws:executeAwsApi
            isEnd: true
            inputs:
              Service: autoscaling
              Api: CompleteLifecycleAction
              AutoScalingGroupName: "{{ASGName}}"
              InstanceId: "{{InstanceId}}"
              LifecycleActionResult: ABANDON
              LifecycleHookName: "{{LCHName}}"
  RDGWHostRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/CloudWatchAgentServerPolicy'
      Policies:
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - s3:GetObject
                Resource: !Sub
                  - arn:${AWS::Partition}:s3:::${S3Bucket}/${QSS3KeyPrefix}*
                  - S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
                Effect: Allow
              - Action:
                  - s3:ListBucket
                Resource: !Sub
                  - arn:${AWS::Partition}:s3:::${S3Bucket}
                  - S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
                Effect: Allow
          PolicyName: aws-quick-start-s3-policy
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - s3:GetObject
                Resource: 
                  - !Sub 'arn:${AWS::Partition}:s3:::aws-ssm-${AWS::Region}/*'
                  - !Sub 'arn:${AWS::Partition}:s3:::aws-windows-downloads-${AWS::Region}/*'
                  - !Sub 'arn:${AWS::Partition}:s3:::amazon-ssm-${AWS::Region}/*'
                  - !Sub 'arn:${AWS::Partition}:s3:::amazon-ssm-packages-${AWS::Region}/*'
                  - !Sub 'arn:${AWS::Partition}:s3:::${AWS::Region}-birdwatcher-prod/*'
                  - !Sub 'arn:${AWS::Partition}:s3:::patch-baseline-snapshot-${AWS::Region}/*'
                Effect: Allow
          PolicyName: ssm-custom-s3-policy
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                Resource: 
                  - !Ref 'RDGWLocalUserSecrets'
          PolicyName: ssm-secrets-policy
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Principal:
              Service:
                - ec2.amazonaws.com
            Effect: Allow
        Version: '2012-10-17'
  RDGWHostProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref 'RDGWHostRole'
      Path: /
  EventBridgeSSMAutoRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - ssm:StartAutomationExecution
              Resource:
                - !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:automation-definition/${SetupConfigurationDoc}:$DEFAULT'
            - Effect: Allow
              Action:
                - iam:PassRole
              Resource:
                - !GetAtt ExecutionResourceRole.Arn
              Condition: {"StringLikeIfExists": {"iam:PassedToService": "ssm.amazonaws.com"}}
          PolicyName: "EventBridge_Invoke_SSM_Automation"
      Path: /service-role/
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - events.amazonaws.com
            Action: sts:AssumeRole
  ExecutionResourceRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - autoscaling:CompleteLifecycleAction
                Resource: !Sub arn:${AWS::Partition}:autoscaling:*:${AWS::AccountId}:autoScalingGroup:*:autoScalingGroupName/${AWS::StackName}
          PolicyName: asg-lch-complete
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ssm.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonSSMAutomationRole
      Description: New IAM Role to allow SSM access.
  ALBResource:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: network
      Subnets:
        - !Ref 'PublicSubnet1ID'
        - !Ref 'PublicSubnet2ID'
  ALBTargetGroup3389:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 3389
      Protocol: TCP
      VpcId: !Ref 'VPCID'
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '60'
        - Key: stickiness.enabled
          Value: 'true'
  ALBTargetGroup443:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 443
      Protocol: TCP
      VpcId: !Ref 'VPCID'
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '60'
        - Key: stickiness.enabled
          Value: 'true'
  ALBTargetGroup3391:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 3391
      Protocol: UDP
      VpcId: !Ref 'VPCID'
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '60'
        - Key: stickiness.enabled
          Value: 'true'
  ALBListener3389:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref 'ALBResource'
      Port: 3389
      Protocol: TCP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref 'ALBTargetGroup3389'
  ALBListener443:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref 'ALBResource'
      Port: 443
      Protocol: TCP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref 'ALBTargetGroup443'
  ALBListener3391:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref 'ALBResource'
      Port: 3391
      Protocol: UDP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref 'ALBTargetGroup3391'
  RDGWLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    DeletionPolicy: Delete
    Properties:
      LaunchTemplateData:
        MetadataOptions:
          HttpEndpoint: enabled
          HttpTokens: required
        InstanceType: !Ref 'RDGWInstanceType'
        ImageId: !Ref 'LatestAmiId'
        SecurityGroupIds:
          - !Ref RemoteDesktopGatewaySG
        IamInstanceProfile:
          Name: !Ref 'RDGWHostProfile'
        BlockDeviceMappings:
          - DeviceName: /dev/sda1
            Ebs:
              VolumeSize: 50
              VolumeType: gp2
        KeyName: !Ref 'KeyPairName'
        TagSpecifications:
           - 
            ResourceType: 'instance'
            Tags:
              - Key: "Name"
                Value: "RDGW"
  RDGWAutoScalingGroup:
    DependsOn: ScaleUpEventBridgeResource
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}"
      LaunchTemplate:
        LaunchTemplateId: !Ref 'RDGWLaunchTemplate'
        Version: !GetAtt 'RDGWLaunchTemplate.LatestVersionNumber'
      VPCZoneIdentifier:
        - !Ref 'PublicSubnet1ID'
        - !Ref 'PublicSubnet2ID'
      MinSize: !Ref 'NumberOfRDGWHosts'
      MaxSize: !Ref 'NumberOfRDGWHosts'
      Cooldown: '300'
      DesiredCapacity: !Ref 'NumberOfRDGWHosts'
      TargetGroupARNs:
        - !Ref 'ALBTargetGroup3389'
        - !Ref 'ALBTargetGroup443'
        - !Ref 'ALBTargetGroup3391'
      LifecycleHookSpecificationList:
        - LifecycleTransition: autoscaling:EC2_INSTANCE_LAUNCHING
          LifecycleHookName: DomainJoinHook
          DefaultResult: ABANDON
          HeartbeatTimeout: 1200
  RemoteDesktopGatewaySG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable RDP access from the internet.
      VpcId: !Ref 'VPCID'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          CidrIp: !Ref 'RDGWCIDR'
        - IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          CidrIp: !Ref 'RDGWCIDR'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref 'RDGWCIDR'
        - IpProtocol: udp
          FromPort: 3391
          ToPort: 3391
          CidrIp: !Ref 'RDGWCIDR'
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: !Ref 'RDGWCIDR'
  ScaleUpEventBridgeResource:
    Type: AWS::Events::Rule
    Properties:
      State: ENABLED
      Description: Run configuration document that joins domain and configures RDGW instances.
      EventPattern:
        source:
          - aws.autoscaling
        detail-type:
          - EC2 Instance-launch Lifecycle Action
        detail:
          AutoScalingGroupName:
            - !Sub "${AWS::StackName}"
      Targets:
        - Arn: !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:automation-definition/${SetupConfigurationDoc}:$DEFAULT'
          Id: Windows-Scale-Out
          RoleArn: !GetAtt EventBridgeSSMAutoRole.Arn
          InputTransformer:
            InputPathsMap:
              InstanceId: $.detail.EC2InstanceId
              ASGName: $.detail.AutoScalingGroupName
              LCHName: $.detail.LifecycleHookName
            InputTemplate: !Sub '{"AutomationAssumeRole":["${ExecutionResourceRole.Arn}"],"InstanceId":[<InstanceId>],"ASGName":[<ASGName>],"LCHName":[<LCHName>],"DomainDNSName":["${DomainDNSName}"],"AdminSecParam":["${RDGWLocalUserSecrets}"],"QSS3BucketName":["${QSS3BucketName}"],"QSS3KeyPrefix":["${QSS3KeyPrefix}"],"URLSuffix":["${AWS::URLSuffix}"]}'
  RDGWResourceGroup:
    Condition: appInsightsMonitoring
    Type: AWS::ResourceGroups::Group
    Properties:
      Name: !If [UsingDefaultAppName, !Sub "ApplicationInsights-${AWS::StackName}", !Ref AppInsightsApplicationName]
      ResourceQuery:
        Query:
          TagFilters:
            - Key: 'aws:cloudformation:stack-name'
              Values:
                - !Sub "${AWS::StackName}"
        Type: 'TAG_FILTERS_1_0'          
  ApplicationInsightsRDGW:
    Condition: appInsightsMonitoring
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName: !Ref 'RDGWResourceGroup'
      AutoConfigurationEnabled: true
    DependsOn: RDGWResourceGroup
Outputs:
  RDPURL:
    Description: ELB DNS name to connect to RDP Gateway.
    Value: !GetAtt 'ALBResource.DNSName'
  RemoteDesktopGatewaySGID:
    Value: !Ref 'RemoteDesktopGatewaySG'
    Description: Remote Desktop Gateway Security Group ID